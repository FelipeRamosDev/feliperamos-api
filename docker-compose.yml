services:
  ai-service:
    build: .
    container_name: ai-service
    environment:
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - feliperamos-net
    env_file:
      - .env.local
    command: ['npm', 'run', 'start:ai']

  slack-service:
    build: .
    container_name: slack-service
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - feliperamos-net
    env_file:
      - .env.local
    command: ['npm', 'run', 'start:slack']

  api-server:
    build: .
    container_name: api-server
    ports:
      - "7000:7000"
    environment:
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - feliperamos-net
    env_file:
      - .env.local
    command: ['npm', 'run', 'start:api-server']

  socket-server:
    build: .
    container_name: socket-server
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - feliperamos-net
    env_file:
      - .env.local
    command: ['npm', 'run', 'start:socket-server']

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6000:6000"
    restart: unless-stopped
    networks:
      - feliperamos-net
    volumes:
      - redis_data:/data
    command: redis-server --port 6000 --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6000", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - NODE_ENV=production
    env_file:
      - .env.local
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - feliperamos-net
    restart: unless-stopped
    command: postgres -p ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p $${DB_PORT} -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  redis_data:
  postgres_data:

networks:
  feliperamos-net:
    driver: bridge
